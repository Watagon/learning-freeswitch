const config = require('config')
const sip = require ('sip-lab')
const Zeq = require('@mayama/zeq')
const m = require('data-matching')
const sip_msg = require('sip-matching')

// create our Zeq instance
var z = new Zeq()

const conf = {
    domain: config.local_ip,
    server: config.local_ip,
    password: '1234',
}

async function test() {
    // set trap for events generated by sip-lab
    z.trap_events(sip.event_source, 'event', (evt) => {
        var e = evt.args[0]
        return e
    })

    // set list of available codecs (just to make SIP messages to be shorter)
    sip.set_codecs("pcmu/8000/1:128,pcma/8000/1:128,gsm/8000/1:128")

    // set the timeout in milliseconds to notify aggregatedd DTMF digits
    sip.dtmf_aggregation_on(500)

    // start sip-lab
    console.log(sip.start((data) => { console.log(data)} ))

    // create a transport
    const t1 = sip.transport.create({address: config.local_ip})
    const t2 = sip.transport.create({address: config.local_ip})

    let calling_number = '1000'
    let called_number = 'user1001'

    // print transports 
    console.log("t1", t1)
    console.log("t2", t2)

    z.add_event_filter({ event: 'non_dialog_request' })

    const acc1 = sip.account.create(t1.id, { ...conf, username: '1000'})
    const acc2 = sip.account.create(t2.id, { ...conf, username: '1001'})

    // regist terminals
    sip.account.register(acc1, { auto_refresh: true })
    sip.account.register(acc2, { auto_refresh: true })

    await z.wait([
        {
            event: 'registration_status',
            account_id: acc1.id,
            code: 200,
            reason: 'OK',
        },
        {
            event: 'registration_status',
            account_id: acc2.id,
            code: 200,
            reason: 'OK',
        },
    ], 10 * 1000)
    console.log('acc1', acc1)
    console.log('acc2', acc2)

    // create a call to freeswitch default interface (port 5060)
    const oc = sip.call.create(t1.id, {
        from_uri: `sip:${calling_number}@${config.local_ip}:5060`,
        to_uri: `sip:${called_number}@${config.local_ip}:5060`,
        auth: {
            username: '1000',
            password: '1234',
            realm: config.local_ip
        }
    })

    // wait for replies from freeswitch
    await z.wait([
        {
            event: 'incoming_call',
            call_id: m.collect('call_id'),
            transport_id: t2.id,
        },
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '407',
                $rr: 'Proxy Authentication Required',
            }),
        },
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '100',
                $rr: 'Trying',
            }),
        },
    ], 1000)
    const ic = {
        id: z.store.call_id,
        sip_call_id: z.store.sip_call_id
    }
    console.log('ic', ic)

    // anser the call at t2 side
    sip.call.respond(ic.id, { code: 200, reason: 'OK' })

    z.add_event_filter({ event: 'media_update', call_id: oc.id, status: 'setup_ok' })
    z.add_event_filter({ event: 'media_update', call_id: ic.id, status: 'setup_ok' })
    z.add_event_filter({ event: 'media_update', call_id: oc.id, status: 'ok' })
    z.add_event_filter({ event: 'media_update', call_id: ic.id, status: 'ok' })

    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
            }),
        },
        // {
        //     event: 'media_update',
        //     call_id: oc.id,
        //     status: 'ok',
        // },
    ], 1000)

    // wait a little for the voice path to be established.
    await z.sleep(500)

    // start detection of inband DTMF
    sip.call.start_inband_dtmf_detection(oc.id)
    sip.call.start_inband_dtmf_detection(ic.id)

    let digits = '112233'
    let mode = 1 // mode=0 (RFC2833), mode=1 (inband)

    // send digits
    sip.call.send_dtmf(oc.id, { digits: '0123456789', mode})
    sip.call.send_dtmf(ic.id, { digits: '9876543210', mode})

    // wait for echo of DTMF digits
    await z.wait([
        {
            event: 'dtmf',
            call_id: ic.id,
            digits: '0123456789',
            mode,
            media_id: 0
        },
        {
            event: 'dtmf',
            call_id: oc.id,
            digits: '9876543210',
            mode,
            media_id: 0
        },
    ], 3000)

    // terminate the call
    sip.call.terminate(oc.id)

    // wait for termination events
    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'BYE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
            }),
        },
        {
            event: 'call_ended',
            call_id: oc.id,
        },
        {
            event: 'call_ended',
            call_id: ic.id,
        },
    ], 1000)

    console.log("Success")

    sip.stop()
    process.exit(0)
}


test()
.catch(e => {
    console.error(e)
    process.exit(1)
})


